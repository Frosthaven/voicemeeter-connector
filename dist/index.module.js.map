{"version":3,"file":"index.module.js","sources":["../src/lib/DLLHandler.ts","../src/lib/VoicemeeterConsts.ts","../src/lib/VoicemeeterConnector.ts","../src/index.ts"],"sourcesContent":["import Registry from \"winreg\";\r\n\r\nconst DLLHandler = {\r\n\tgetDLLPath: async (): Promise<any> => {\r\n\t\tconst regKey = new Registry({\r\n\t\t\thive: Registry.HKLM,\r\n\t\t\tkey: \"\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\VB:Voicemeeter {17359A74-1236-5467}\",\r\n\t\t});\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tregKey.values((err: any, items: any) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tthrow new Error(err);\r\n\t\t\t\t}\r\n\t\t\t\tconst unistallerPath = items.find((i: any) => i.name === \"UninstallString\").value;\r\n\t\t\t\tconst fileNameIndex = unistallerPath.lastIndexOf(\"\\\\\");\r\n\t\t\t\tresolve(unistallerPath.slice(0, fileNameIndex));\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n};\r\n\r\nexport default DLLHandler;\r\n","export const InterfaceTypes = {\r\n\tstrip: 0,\r\n\tbus: 1,\r\n};\r\n\r\nexport enum Replacers {\r\n\tApp = \"[app]\",\r\n\tBus = \"[bus]\",\r\n\tButton = \"[button]\",\r\n\tCell = \"[cell]\",\r\n\tChannel = \"[channel]\",\r\n\tStrip = \"[strip]\",\r\n}\r\n\r\n/* STRIP ***********************************************************************\r\n **************************************************************************** */\r\n\r\nexport enum StripProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tSolo = \"Solo\",\r\n\tMC = \"MC\",\r\n\tGain = \"Gain\",\r\n\tPan_x = \"Pan_x\",\r\n\tPan_y = \"Pan_y\",\r\n\tColor_x = \"Color_x\",\r\n\tColor_y = \"Color_y\",\r\n\tfx_x = \"fx_x\",\r\n\tfx_y = \"fx_y\",\r\n\tAudibility = \"Audibility\",\r\n\tComp = \"Comp\",\r\n\tGate = \"Gate\",\r\n\tKaraoke = \"Karaoke\",\r\n\tLimit = \"Limit\",\r\n\tEQGain1 = \"EQGain1\",\r\n\tEQGain2 = \"EQGain2\",\r\n\tEQGain3 = \"EQGain3\",\r\n\tLabel = \"Label\",\r\n\tA1 = \"A1\",\r\n\tA2 = \"A2\",\r\n\tA3 = \"A3\",\r\n\tA4 = \"A4\",\r\n\tA5 = \"A5\",\r\n\tB1 = \"B1\",\r\n\tB2 = \"B2\",\r\n\tB3 = \"B3\",\r\n\tFadeTo = \"FadeTo\",\r\n\tFadeBy = \"FadeBy\",\r\n\tReverb = \"Reverb\",\r\n\tDelay = \"Delay\",\r\n\tFx1 = \"Fx1\",\r\n\tFx2 = \"Fx2\",\r\n\tPostReverb = \"PostReverb\",\r\n\tPostDelay = \"PostDelay\",\r\n\tPostFx1 = \"PostFx1\",\r\n\tPostFx2 = \"PostFx2\",\r\n\tDeviceName = \"device.name\",\r\n\tDeviceSR = \"device.sr\",\r\n\tDeviceWDM = \"device.wdm\",\r\n\tDeviceKS = \"device.ks\",\r\n\tDeviceMME = \"device.mme\",\r\n\tDeviceASIO = \"device.asio\",\r\n}\r\n\r\nexport enum StripGainLayerProperties {\r\n\tGainLayer = \"GainLayer[bus]\",\r\n}\r\n\r\nexport enum StripAppProperties {\r\n\tStripAppGain = \"AppGain\",\r\n\tStripAppMute = \"AppMute\",\r\n\tStripAppGainPartialMatch = \"App[app].Gain\",\r\n\tStripAppMutePartialMatch = \"App[app].Mute\",\r\n}\r\n\r\n/* BUS *************************************************************************\r\n **************************************************************************** */\r\n\r\nexport enum BusProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tEQ = \"EQ.on\",\r\n\tEQAB = \"EQ.AB\",\r\n\tGain = \"Gain\",\r\n\tLabel = \"Label\", // not listed in api doc, but exists in newer versions\r\n\tModeNormal = \"mode.normal\",\r\n\tModeAmix = \"mode.Amix\",\r\n\tModeBmix = \"mode.Bmix\",\r\n\tModeRepeat = \"mode.Repeat\",\r\n\tModeComposite = \"mode.Composite\",\r\n\tModeTVMix = \"mode.TVMix\",\r\n\tModeUpMix21 = \"mode.UpMix21\",\r\n\tModeUpMix41 = \"mode.UpMix41\",\r\n\tModeUpMix61 = \"mode.UpMix61\",\r\n\tModeCenterOnly = \"mode.CenterOnly\",\r\n\tModeLFEOnly = \"mode.LFEOnly\",\r\n\tFadeTo = \"FadeTo\",\r\n\tFadeBy = \"FadeBy\",\r\n\tSel = \"Sel\",\r\n\tReturnReverb = \"ReturnReverb\",\r\n\tReturnDelay = \"ReturnDelay\",\r\n\tReturnFx1 = \"ReturnFx1\",\r\n\tReturnFx2 = \"ReturnFx2\",\r\n\tMonitor = \"Monitor\",\r\n\tDeviceName = \"device.name\",\r\n\tDeviceSR = \"device.sr\",\r\n\tDeviceWDM = \"device.wdm\",\r\n\tDeviceKS = \"device.ks\",\r\n\tDeviceMME = \"device.mme\",\r\n\tDeviceASIO = \"device.asio\",\r\n}\r\n\r\nexport enum BusEQChannelCellProperties {\r\n\tEQChannelCellOn = \"EQ.channel[channel].cell[cell].on\",\r\n\tEQChannelCellType = \"EQ.channel[channel].cell[cell].type\",\r\n\tEQChannelCellF = \"EQ.channel[channel].cell[cell].f\",\r\n\tEQChannelCellGain = \"EQ.channel[channel].cell[cell].gain\",\r\n\tEQChannelCellQ = \"EQ.channel[channel].cell[cell].q\",\r\n}\r\n\r\n/* COMMAND *********************************************************************\r\n **************************************************************************** */\r\n\r\nexport enum CommandProperties {\r\n\tShutdown = \"Shutdown\",\r\n\tShow = \"Show\",\r\n\tRestart = \"Restart\",\r\n\tEject = \"Eject\",\r\n\tReset = \"Reset\",\r\n\tSave = \"Save\",\r\n\tLoad = \"Load\",\r\n\tDialogShowVBANCHAT = \"DialogShow.VBANCHAT\",\r\n}\r\n\r\n/* BUSEQ ***********************************************************************\r\n **************************************************************************** */\r\n\r\nexport enum CommandBusEQProperties {\r\n\tLoadBUSEQ = \"LoadBUSEQ[bus]\",\r\n\tSaveBUSEQ = \"SaveBUSEQ[bus]\",\r\n}\r\n\r\n/* BUTTON **********************************************************************\r\n **************************************************************************** */\r\n\r\nexport enum CommandButtonProperties {\r\n\tButtonState = \"Button[button].State\",\r\n\tButtonStateOnly = \"Button[button].StateOnly\",\r\n\tButtonTrigger = \"Button[button].Trigger\",\r\n}\r\n\r\n/* FX **************************************************************************\r\n **************************************************************************** */\r\n\r\nexport enum FXProperties {\r\n\tReverbOn = \"Reverb.On\",\r\n\tReverbAB = \"Reverb.AB\",\r\n\tDelayOn = \"Delay.On\",\r\n\tDelayAB = \"Delay.AB\",\r\n}\r\n\r\n/* PATCH ***********************************************************************\r\n **************************************************************************** */\r\n\r\n/* @todo\r\npatch.asio[i] 0 to ASIO input ASIO Patch 1\r\npatch.OutA2[i] 0 to ASIO output channel ASIO Patch A2 Bus 2\r\npatch.OutA3[i] 0 to ASIO output channel ASIO Patch A3 Bus 2\r\npatch.OutA4[i] 0 to ASIO output channel ASIO Patch A4 Bus 3\r\npatch.OutA5[i] 0 to ASIO output channel ASIO Patch A5 Bus 3\r\nPatch.composite[j] 0 to 22 (1 = first channel) 0 = default BUS 2\r\nPatch.insert[k] 0 (off) or 1 (on) Virtual ASIO insert 2\r\nPatch.PostFaderComposite 0 (PRE) or 1 (POST) COMPOSITE Mode 2\r\nPatch.PostFxInsert 0 (PRE) or 1 (POST) Virtual INSERT Point 2\r\n\r\ni= input channel zero based index (for physical strips only â€“ 2 channels per strip).\r\nj= composite channel zero based index (0 to 7) COMPOSITE mode is made of 8 channels.\r\nk= input channel zero based index (0 to 21).\r\n*/\r\nexport enum PatchProperties {\r\n\tPostFaderComposite = \"PostFaderComposite\",\r\n\tPostFxInsert = \"PostFxInsert\",\r\n}\r\n\r\nexport enum PatchChannelProperties {\r\n\tAsio = \"asio[channel]\",\r\n\tOutA2 = \"OutA2[channel]\",\r\n\tOutA3 = \"OutA3[channel]\",\r\n\tOutA4 = \"OutA4[channel]\",\r\n\tOutA5 = \"OutA5[channel]\",\r\n}\r\n\r\n// @todo the following 2 patch properties\r\nexport enum PatchCompositeProperties {\r\n\tComposite = \"composite[channel]\",\r\n}\r\n\r\nexport enum PatchInsertProperties {\r\n\tInsert = \"insert[channel]\",\r\n}\r\n\r\n/* SYSTEM **********************************************************************\r\n **************************************************************************** */\r\n\r\nexport enum SystemProperties {\r\n\tSR = \"sr\",\r\n\tASIOSR = \"ASIOsr\",\r\n\tBufferMME = \"buffer.mme\",\r\n\tBufferWDM = \"buffer.wdm\",\r\n\tBufferKS = \"buffer.ks\",\r\n\tBufferASIO = \"buffer.asio\",\r\n\tModeExclusif = \"mode.exclusif\",\r\n\tModeSwift = \"mode.swift\",\r\n\tMonitorOnSEL = \"MonitorOnSEL\",\r\n}\r\n\r\nexport enum SystemBusDelayProperties {\r\n\tDelay = \"delay[bus]\",\r\n}\r\n\r\n/* RECORDER ********************************************************************\r\n **************************************************************************** */\r\n\r\n// @todo\r\nexport enum RecorderProperties {}\r\n\r\n/* VBAN ************************************************************************\r\n **************************************************************************** */\r\n\r\n// @todo\r\nexport enum VBANProperties {}\r\n","/* eslint-disable no-control-regex */\r\nimport ffi from \"ffi-napi\";\r\nimport refArray from \"ref-array-napi\";\r\nimport DLLHandler from \"./DLLHandler\";\r\nimport { Device, VMLibrary, VoiceMeeterTypes } from \"../types/VoicemeeterTypes\";\r\nimport {\r\n\tBusProperties,\r\n\tStripProperties,\r\n\tCommandProperties,\r\n\tStripGainLayerProperties,\r\n\tReplacers,\r\n\tStripAppProperties,\r\n\tCommandButtonProperties,\r\n\tCommandBusEQProperties,\r\n\tFXProperties,\r\n\tBusEQChannelCellProperties,\r\n\tPatchProperties,\r\n\tSystemProperties,\r\n\tSystemBusDelayProperties,\r\n\tPatchChannelProperties,\r\n} from \"./VoicemeeterConsts\";\r\n/**\r\n * @ignore\r\n */\r\nconst CharArray = refArray(\"char\");\r\n/**\r\n * @ignore\r\n */\r\nconst LongArray = refArray(\"long\");\r\n/**\r\n * @ignore\r\n */\r\nconst FloatArray = refArray(\"float\");\r\n/**\r\n * @ignore\r\n */\r\nlet libVM: VMLibrary;\r\n/**\r\n * @ignore\r\n */\r\nlet instance: Voicemeeter;\r\n\r\nexport default class Voicemeeter {\r\n\t/**\r\n\t * Initializes the voice meeter dll connection.\r\n\t * This call is neccessary to use the api. It returns a promise with a VoiceMeeter instance\r\n\t */\r\n\tpublic static async init(): Promise<Voicemeeter> {\r\n\t\tconst dllPath = await DLLHandler.getDLLPath();\r\n\r\n\t\treturn new Promise((resolve: (instance: Voicemeeter) => any) => {\r\n\t\t\tif (!instance) {\r\n\t\t\t\tinstance = new Voicemeeter();\r\n\t\t\t}\r\n\t\t\tlibVM = ffi.Library(`${dllPath}/VoicemeeterRemote64.dll`, {\r\n\t\t\t\tVBVMR_Login: [\"long\", []],\r\n\t\t\t\tVBVMR_Logout: [\"long\", []],\r\n\t\t\t\tVBVMR_RunVoicemeeter: [\"long\", [\"long\"]],\r\n\t\t\t\tVBVMR_IsParametersDirty: [\"long\", []],\r\n\t\t\t\tVBVMR_GetParameterFloat: [\"long\", [CharArray, FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterStringA: [\"long\", [CharArray, CharArray]],\r\n\t\t\t\tVBVMR_SetParameters: [\"long\", [CharArray]],\r\n\t\t\t\tVBVMR_Output_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Output_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_Input_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Input_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterType: [\"long\", [LongArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterVersion: [\"long\", [LongArray]],\r\n\t\t\t});\r\n\t\t\tinstance.isInitialised = true;\r\n\t\t\tresolve(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate isInitialised = false;\r\n\tprivate isConnected = false;\r\n\tprivate outputDevices: Device[] = [];\r\n\tprivate inputDevices: Device[] = [];\r\n\tprivate version = \"\";\r\n\tprivate type: VoiceMeeterTypes;\r\n\tprivate eventPool = [] as Array<() => void>;\r\n\r\n\t/**\r\n\t * Starts a connection to VoiceMeeter\r\n\t */\r\n\tpublic connect = () => {\r\n\t\tif (!this.isInitialised) {\r\n\t\t\tthrow new Error(\"Await the initialisation before connect\");\r\n\t\t}\r\n\t\tif (this.isConnected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (libVM.VBVMR_Login() === 0) {\r\n\t\t\tthis.isConnected = true;\r\n\t\t\tthis.type = this.getVoicemeeterType();\r\n\t\t\tthis.version = this.getVoicemeeterVersion();\r\n\t\t\tsetInterval(this.checkPropertyChange, 10);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.isConnected = false;\r\n\t\tthrow new Error(\"Connection failed\");\r\n\t};\r\n\r\n\t/**\r\n\t * Getter $outputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $outputDevices(): Device[] {\r\n\t\treturn this.outputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $inputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $inputDevices(): Device[] {\r\n\t\treturn this.inputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $version\r\n\t * @return {string }\r\n\t */\r\n\tpublic get $version(): string {\r\n\t\treturn this.version;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $type\r\n\t * @return {VoiceMeeterTypes}\r\n\t */\r\n\tpublic get $type(): VoiceMeeterTypes {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\t/**\r\n\t * Terminates the connection to VoiceMeeter\r\n\t */\r\n\tpublic disconnect = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (libVM.VBVMR_Logout() === 0) {\r\n\t\t\t\tthis.isConnected = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t} catch {\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Updates all input and ouput devices\r\n\t */\r\n\tpublic updateDeviceList = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tthis.outputDevices = [];\r\n\t\tthis.inputDevices = [];\r\n\t\tconst outputDeviceNumber = libVM.VBVMR_Output_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < outputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Output_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.outputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst inputDeviceNumber = libVM.VBVMR_Input_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < inputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Input_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.inputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns wheter a parameter has been changed\r\n\t */\r\n\tpublic isParametersDirty = () => {\r\n\t\treturn libVM.VBVMR_IsParametersDirty();\r\n\t};\r\n\r\n\t/* STRIP PARAMS ************************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Gets a strip parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {StripProperties} property Property which should be get\r\n\t */\r\n\tpublic getStripParameter = (index: number, property: StripProperties) => {\r\n\t\treturn this.getParameter(\"Strip\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a strip.\r\n\t * @param  {number} index Strip number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setStripParameter = (index: number, property: StripProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Strip\", index, property, value);\r\n\t};\r\n\r\n\t/* BUS PARAMS **************************************************************\r\n\t ************************************************************************ */\r\n\t/**\r\n\t * Gets a bus parameter.\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {BusProperties} property Property which should be get\r\n\t */\r\n\r\n\tpublic getBusParameter = (index: number, property: BusProperties) => {\r\n\t\treturn this.getParameter(\"Bus\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus.\r\n\t * @param  {number} index Bus number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setBusParameter = (index: number, property: BusProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Bus\", index, property, value);\r\n\t};\r\n\r\n\t/* STRIP GAIN LAYER PARAMS *************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Gets a strip gain layer parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {number} bus Index of the bus\r\n\t */\r\n\tpublic getStripGainLayerParameter = (index: number, bus: number) => {\r\n\t\tconst property = StripGainLayerProperties.GainLayer.replace(Replacers.Bus, `[${bus}]`);\r\n\t\treturn this.getParameter(\"Strip\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a strip gain layer parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {number} bus Index of the bus\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setStripGainLayerParameter = (index: number, bus: number, value: any) => {\r\n\t\tconst property = StripGainLayerProperties.GainLayer.replace(Replacers.Bus, `[${bus}]`);\r\n\t\treturn this.setParameter(\"Strip\", index, property, value);\r\n\t};\r\n\r\n\t/* STRIP APP PARAMS ********************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Sets a strip app parameter (app parameters are write-only)\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {StripAppProperties} property Property which should be set\r\n\t * @param  {string} [app] Name of the app\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setStripAppParameter = (index: number, property: StripAppProperties | string, app: string, value: any) => {\r\n\t\tif (property.includes(\"[\")) {\r\n\t\t\t// we are looking at an app that is starting with a name\r\n\t\t\tproperty = property.replace(Replacers.App, `[${app}]`);\r\n\t\t} else {\r\n\t\t\t// we are looking at an app with an exact name\r\n\t\t\t// AppGain, Appmute = (\"appname\", number)\r\n\t\t\tvalue = `(\"${app}\",${value})`;\r\n\t\t}\r\n\t\treturn this.setParameter(\"Strip\", index, property, value);\r\n\t};\r\n\r\n\t/* BUS EQ CHANNEL CELL PARAMS **********************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Gets a bus eq channel cell value\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {number} channel the channel 0 based index\r\n\t * @param  {number} cell the cell 0 based index (0-5)\r\n\t * @param  {BusEQChannelCellProperties} property Property which should be get\r\n\t */\r\n\tpublic getBusEQChannelCellParameter = (index: number, channel: number, cell: number, property: BusEQChannelCellProperties | string) => {\r\n\t\tproperty = property.replace(Replacers.Channel, `[${channel}]`);\r\n\t\tproperty = property.replace(Replacers.Cell, `[${cell}]`);\r\n\t\treturn this.getParameter(\"Bus\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a bus eq channel cell value\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {number} channel the channel 0 based index\r\n\t * @param  {number} cell the cell 0 based index (0-5)\r\n\t * @param  {BusEQChannelCellProperties} property Property which should be set\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setBusEQChannelCellParameter = (\r\n\t\tindex: number,\r\n\t\tchannel: number,\r\n\t\tcell: number,\r\n\t\tproperty: BusEQChannelCellProperties | string,\r\n\t\tvalue: any\r\n\t) => {\r\n\t\tproperty = property.replace(Replacers.Channel, `[${channel}]`);\r\n\t\tproperty = property.replace(Replacers.Cell, `[${cell}]`);\r\n\t\treturn this.setParameter(\"Bus\", index, property, value);\r\n\t};\r\n\r\n\t/* FX PARAMS ***************************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Gets an fx parameter\r\n\t * @param  {FXProperties} property Property which should be get\r\n\t */\r\n\tpublic getFXParameter = (property: FXProperties | string) => {\r\n\t\treturn this.getParameter(\"Fx\", null, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets an fx parameter\r\n\t * @param  {FXProperties} property Property which should be set\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setFXParameter = (property: FXProperties | string, value: any) => {\r\n\t\treturn this.setParameter(\"Fx\", null, property, value);\r\n\t};\r\n\r\n\t/* PATCH PARAMS ************************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Gets a patch parameter\r\n\t * @param  {PatchProperties} property Property which should be get\r\n\t */\r\n\tpublic getPatchParameter = (property: PatchProperties | string) => {\r\n\t\treturn this.getParameter(\"Patch\", null, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a patch parameter\r\n\t * @param  {PatchProperties} property Property which should be set\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setPatchParamater = (property: PatchProperties | string, value: any) => {\r\n\t\treturn this.setParameter(\"Patch\", null, property, value);\r\n\t};\r\n\r\n\t/* PATCH PARAMS ************************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Gets a patch channel parameter\r\n\t * @param  {number} index input channel zero based index (for physical strips only - 2 channels per strip)\r\n\t * @param  {PatchChannelProperties} property Property which should be get\r\n\t */\r\n\tpublic getPatchChannelParameter = (index: number, property: PatchChannelProperties | string) => {\r\n\t\tproperty = property.replace(Replacers.Channel, `[${index}]`);\r\n\t\treturn this.getParameter(\"patch\", null, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a patch channel parameter\r\n\t * @param  {number} index input channel zero based index (for physical strips only - 2 channels per strip)\r\n\t * @param  {PatchChannelProperties} property Property which should be set\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setPatchChannelParamater = (index: number, property: PatchChannelProperties | string, value: any) => {\r\n\t\tproperty = property.replace(Replacers.Channel, `[${index}]`);\r\n\t\treturn this.setParameter(\"patch\", null, property, value);\r\n\t};\r\n\r\n\t/* SYSTEM PARAMS ***********************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Gets a system parameter\r\n\t * @param  {SystemProperties} property Property which should be get\r\n\t */\r\n\tpublic getSystemParameter = (property: SystemProperties | string) => {\r\n\t\treturn this.getParameter(\"Option\", null, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a system parameter\r\n\t * @param  {SystemProperties} property Property which should be set\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setSystemParameter = (property: SystemProperties | string, value: any) => {\r\n\t\treturn this.setParameter(\"Option\", null, property, value);\r\n\t};\r\n\r\n\t/* SYSTEM BUS DELAY PARAMS *************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Gets a system parameter\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {SystemProperties} property Property which should be get\r\n\t */\r\n\tpublic getSystemBusDelayParameter = (index: number, property: SystemBusDelayProperties | string) => {\r\n\t\tproperty = property.replace(Replacers.Bus, `[${index}]`);\r\n\t\treturn this.getParameter(\"Option\", null, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a system parameter\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {SystemProperties} property Property which should be set\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setSystemBusDelayParameter = (index: number, property: SystemBusDelayProperties | string, value: any) => {\r\n\t\tproperty = property.replace(Replacers.Bus, `[${index}]`);\r\n\t\treturn this.setParameter(\"Option\", null, property, value);\r\n\t};\r\n\r\n\t/* COMMAND PARAMS **********************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * Sets a command (write-only)\r\n\t * @param {CommandProperties} property Propertyname which should be executed\r\n\t * @param value Property value\r\n\t */\r\n\tpublic setCommandParameter = (property: CommandProperties, value: any): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tconst scriptString = `Command.${property}=${value};`;\r\n\t\tconst script = Buffer.alloc(scriptString.length + 1);\r\n\t\tscript.fill(0);\r\n\t\tscript.write(scriptString);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a bus eq command (write-only)\r\n\t * @param {number} bus Index of the bus\r\n\t * @param {CommandBusEQProperties} property Propertyname which should be executed\r\n\t * @param value Property value\r\n\t */\r\n\tpublic setCommandBusEQParamater = (bus: number, property: CommandBusEQProperties | string, value: any): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tproperty = property.replace(Replacers.Bus, `[${bus}]`);\r\n\t\tconst scriptString = `Command.${property}=${value};`;\r\n\t\tconst script = Buffer.alloc(scriptString.length + 1);\r\n\t\tscript.fill(0);\r\n\t\tscript.write(scriptString);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a button command (write-only)\r\n\t * @param {number} button Index of the macro button\r\n\t * @param {CommandButtonProperties} property Propertyname which should be executed\r\n\t * @param value Property value\r\n\t */\r\n\tpublic setCommandButtonParameter = (button: number, property: CommandButtonProperties | string, value: any): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tproperty = property.replace(Replacers.Button, `[${button}]`);\r\n\t\tconst scriptString = `Command.${property}=${value};`;\r\n\t\tconst script = Buffer.alloc(scriptString.length + 1);\r\n\t\tscript.fill(0);\r\n\t\tscript.write(scriptString);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n\r\n\t/* *************************************************************************\r\n\t ************************************************************************ */\r\n\r\n\t/**\r\n\t * @param  {()=>any} fn Function which should be called if something changes\r\n\t */\r\n\tpublic attachChangeEvent = (fn: () => any) => {\r\n\t\tthis.eventPool.push(fn);\r\n\t};\r\n\r\n\t/**\r\n\t * Checks whether properties has been changed and calls all event listeners\r\n\t */\r\n\tprivate checkPropertyChange = () => {\r\n\t\tif (this.isParametersDirty() === 1) {\r\n\t\t\tthis.eventPool.forEach((eventListener) => {\r\n\t\t\t\teventListener();\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets installed voicemeeter type.\r\n\t * Means Voicemeeter(normal,banana,potato)\r\n\t */\r\n\tprivate getVoicemeeterType = (): VoiceMeeterTypes => {\r\n\t\tconst typePtr = new LongArray(1);\r\n\t\tif (libVM.VBVMR_GetVoicemeeterType(typePtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\tswitch (typePtr[0]) {\r\n\t\t\tcase 1: // Voicemeeter\r\n\t\t\t\treturn \"voicemeeter\";\r\n\t\t\tcase 2: // Voicemeeter Banana\r\n\t\t\t\treturn \"voicemeeterBanana\";\r\n\t\t\tcase 3: // Voicemeeter Potato\r\n\t\t\t\treturn \"voicemeeterPotato\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Voicemeeter seems not to be installed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the installed voicemeeter version\r\n\t */\r\n\tprivate getVoicemeeterVersion = () => {\r\n\t\tconst versionPtr = new LongArray(1) as any;\r\n\t\tif (libVM.VBVMR_GetVoicemeeterVersion(versionPtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\treturn versionPtr;\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a parameter of voicemeeter\r\n\t * @param  {'Strip'|'Bus'} selector Strip or Bus\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties} property Property which should be read\r\n\t */\r\n\tprivate getParameter = (\r\n\t\tselector: \"Strip\" | \"Bus\" | \"Fx\" | \"patch\" | \"Patch\" | \"Option\",\r\n\t\tindex: number | null,\r\n\t\tproperty: StripProperties | BusProperties | string\r\n\t) => {\r\n\t\tconst parameterName = index !== null ? `${selector}[${index}].${property}` : `${selector}.${property}`;\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not correct connected \");\r\n\t\t}\r\n\t\tconst hardwareIdPtr = Buffer.alloc(parameterName.length + 1);\r\n\t\thardwareIdPtr.write(parameterName);\r\n\t\tlet namePtr = null;\r\n\t\tif ([\"Label\", \"FadeTo\", \"FadeBy\", \"AppGain\", \"AppMute\", \"device.name\"].indexOf(property) > -1) {\r\n\t\t\tnamePtr = new CharArray(512);\r\n\t\t\tlibVM.VBVMR_GetParameterStringA(hardwareIdPtr, namePtr);\r\n\t\t\treturn String.fromCharCode\r\n\t\t\t\t.apply(null, namePtr)\r\n\t\t\t\t.split(\"\")\r\n\t\t\t\t.filter((e: string) => {\r\n\t\t\t\t\treturn e !== \"\\0\";\r\n\t\t\t\t})\r\n\t\t\t\t.join(\"\");\r\n\t\t}\r\n\t\tnamePtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetParameterFloat(hardwareIdPtr, namePtr);\r\n\t\treturn namePtr[0];\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus or Strip\r\n\t * @param  {'Strip'|'Bus'} selector\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tprivate setParameter = (\r\n\t\tselector: \"Strip\" | \"Bus\" | \"Fx\" | \"patch\" | \"Patch\" | \"Option\",\r\n\t\tindex: number | null,\r\n\t\tproperty: StripProperties | BusProperties | string,\r\n\t\tvalue: any\r\n\t): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tconst scriptString = index !== null ? `${selector}[${index}].${property}=${value};` : `${selector}.${property}=${value};`;\r\n\t\tconst script = Buffer.alloc(scriptString.length + 1);\r\n\t\tscript.fill(0);\r\n\t\tscript.write(scriptString);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n}\r\n","/* eslint-disable import/prefer-default-export */\r\nimport Voicemeeter from \"./lib/VoicemeeterConnector\";\r\nimport * as constants from \"./lib/VoicemeeterConsts\";\r\nimport * as types from \"./types/VoicemeeterTypes\";\r\n\r\nconst {\r\n\tInterfaceTypes,\r\n\tStripProperties,\r\n\tBusProperties,\r\n\tBusEQChannelCellProperties,\r\n\tFXProperties,\r\n\tCommandProperties,\r\n\tPatchProperties,\r\n\tPatchChannelProperties,\r\n\tPatchCompositeProperties,\r\n\tPatchInsertProperties,\r\n\tSystemProperties,\r\n\tSystemBusDelayProperties,\r\n\tRecorderProperties,\r\n\tVBANProperties,\r\n} = constants;\r\n\r\nexport {\r\n\tVoicemeeter,\r\n\tInterfaceTypes,\r\n\tStripProperties,\r\n\tBusProperties,\r\n\tBusEQChannelCellProperties,\r\n\tFXProperties,\r\n\tCommandProperties,\r\n\tPatchProperties,\r\n\tPatchChannelProperties,\r\n\tPatchCompositeProperties,\r\n\tPatchInsertProperties,\r\n\tSystemProperties,\r\n\tSystemBusDelayProperties,\r\n\tRecorderProperties,\r\n\tVBANProperties,\r\n\ttypes,\r\n};\r\n"],"names":["Replacers","StripProperties","StripGainLayerProperties","StripAppProperties","BusProperties","BusEQChannelCellProperties","CommandProperties","CommandBusEQProperties","CommandButtonProperties","FXProperties","PatchProperties","PatchChannelProperties","PatchCompositeProperties","PatchInsertProperties","SystemProperties","SystemBusDelayProperties","RecorderProperties","VBANProperties","libVM","instance","CharArray","refArray","LongArray","FloatArray","Voicemeeter","this","_this","isInitialised","Error","isConnected","VBVMR_Login","type","getVoicemeeterType","version","getVoicemeeterVersion","setInterval","checkPropertyChange","VBVMR_Logout","outputDevices","inputDevices","outputDeviceNumber","VBVMR_Output_GetDeviceNumber","i","hardwareIdPtr","namePtr","typePtr","VBVMR_Output_GetDeviceDescA","push","name","String","fromCharCode","toArray","replace","hardwareId","inputDeviceNumber","VBVMR_Input_GetDeviceNumber","VBVMR_Input_GetDeviceDescA","VBVMR_IsParametersDirty","index","property","getParameter","value","setParameter","bus","GainLayer","Bus","app","includes","App","channel","cell","Channel","Cell","scriptString","script","Buffer","alloc","length","fill","write","VBVMR_SetParameters","Promise","resolve","setTimeout","button","Button","fn","eventPool","isParametersDirty","forEach","eventListener","VBVMR_GetVoicemeeterType","versionPtr","VBVMR_GetVoicemeeterVersion","selector","parameterName","indexOf","VBVMR_GetParameterStringA","apply","split","filter","e","join","VBVMR_GetParameterFloat","init","regKey","Registry","hive","HKLM","key","values","err","items","unistallerPath","find","fileNameIndex","lastIndexOf","slice","DLLHandler","dllPath","ffi","Library","VBVMR_RunVoicemeeter","InterfaceTypes","strip","constants"],"mappings":"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"}