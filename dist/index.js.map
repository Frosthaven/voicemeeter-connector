{"version":3,"file":"index.js","sources":["../src/lib/VoicemeeterConnector.ts","../src/lib/VoicemeeterConsts.ts","../src/lib/DLLHandler.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable no-control-regex */\r\nimport ffi from \"ffi-napi\";\r\nimport refArray from \"ref-array-napi\";\r\nimport DLLHandler from \"./DLLHandler\";\r\nimport { Device, VMLibrary, VoiceMeeterTypes } from \"../types/VoicemeeterTypes\";\r\nimport { BusProperties, StripProperties, CommandProperties } from \"./VoicemeeterConsts\";\r\n/**\r\n * @ignore\r\n */\r\nconst CharArray = refArray(\"char\");\r\n/**\r\n * @ignore\r\n */\r\nconst LongArray = refArray(\"long\");\r\n/**\r\n * @ignore\r\n */\r\nconst FloatArray = refArray(\"float\");\r\n/**\r\n * @ignore\r\n */\r\nlet libVM: VMLibrary;\r\n/**\r\n * @ignore\r\n */\r\nlet instance: Voicemeeter;\r\n\r\nexport default class Voicemeeter {\r\n\t/**\r\n\t * Initializes the voice meeter dll connection.\r\n\t * This call is neccessary to use the api. It returns a promise with a VoiceMeeter instance\r\n\t */\r\n\tpublic static async init(): Promise<Voicemeeter> {\r\n\t\tconst dllPath = await DLLHandler.getDLLPath();\r\n\r\n\t\treturn new Promise((resolve: (instance: Voicemeeter) => any) => {\r\n\t\t\tif (!instance) {\r\n\t\t\t\tinstance = new Voicemeeter();\r\n\t\t\t}\r\n\t\t\tlibVM = ffi.Library(`${dllPath}/VoicemeeterRemote64.dll`, {\r\n\t\t\t\tVBVMR_Login: [\"long\", []],\r\n\t\t\t\tVBVMR_Logout: [\"long\", []],\r\n\t\t\t\tVBVMR_RunVoicemeeter: [\"long\", [\"long\"]],\r\n\t\t\t\tVBVMR_IsParametersDirty: [\"long\", []],\r\n\t\t\t\tVBVMR_GetParameterFloat: [\"long\", [CharArray, FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterStringA: [\"long\", [CharArray, CharArray]],\r\n\t\t\t\tVBVMR_SetParameters: [\"long\", [CharArray]],\r\n\t\t\t\tVBVMR_Output_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Output_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_Input_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Input_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterType: [\"long\", [LongArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterVersion: [\"long\", [LongArray]],\r\n\t\t\t});\r\n\t\t\tinstance.isInitialised = true;\r\n\t\t\tresolve(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate isInitialised = false;\r\n\tprivate isConnected = false;\r\n\tprivate outputDevices: Device[] = [];\r\n\tprivate inputDevices: Device[] = [];\r\n\tprivate version = \"\";\r\n\tprivate type: VoiceMeeterTypes;\r\n\tprivate eventPool = [] as Array<() => void>;\r\n\r\n\t/**\r\n\t * Starts a connection to VoiceMeeter\r\n\t */\r\n\tpublic connect = () => {\r\n\t\tif (!this.isInitialised) {\r\n\t\t\tthrow new Error(\"Await the initialisation before connect\");\r\n\t\t}\r\n\t\tif (this.isConnected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (libVM.VBVMR_Login() === 0) {\r\n\t\t\tthis.isConnected = true;\r\n\t\t\tthis.type = this.getVoicemeeterType();\r\n\t\t\tthis.version = this.getVoicemeeterVersion();\r\n\t\t\tsetInterval(this.checkPropertyChange, 10);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.isConnected = false;\r\n\t\tthrow new Error(\"Connection failed\");\r\n\t};\r\n\r\n\t/**\r\n\t * Getter $outputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $outputDevices(): Device[] {\r\n\t\treturn this.outputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $inputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $inputDevices(): Device[] {\r\n\t\treturn this.inputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $version\r\n\t * @return {string }\r\n\t */\r\n\tpublic get $version(): string {\r\n\t\treturn this.version;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $type\r\n\t * @return {VoiceMeeterTypes}\r\n\t */\r\n\tpublic get $type(): VoiceMeeterTypes {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\t/**\r\n\t * Terminates the connection to VoiceMeeter\r\n\t */\r\n\tpublic disconnect = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (libVM.VBVMR_Logout() === 0) {\r\n\t\t\t\tthis.isConnected = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t} catch {\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Updates all input and ouput devices\r\n\t */\r\n\tpublic updateDeviceList = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tthis.outputDevices = [];\r\n\t\tthis.inputDevices = [];\r\n\t\tconst outputDeviceNumber = libVM.VBVMR_Output_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < outputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Output_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.outputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst inputDeviceNumber = libVM.VBVMR_Input_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < inputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Input_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.inputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns wheter a parameter has been changed\r\n\t */\r\n\tpublic isParametersDirty = () => {\r\n\t\treturn libVM.VBVMR_IsParametersDirty();\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a bus parameter.\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {BusProperties} property Property which should be get\r\n\t */\r\n\r\n\tpublic getBusParameter = (index: number, property: BusProperties) => {\r\n\t\treturn this.getParameter(\"Bus\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a strip parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {StripProperties} property Property which should be get\r\n\t */\r\n\tpublic getStripParameter = (index: number, property: StripProperties) => {\r\n\t\treturn this.getParameter(\"Strip\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a strip.\r\n\t * @param  {number} index Strip number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setStripParameter = (index: number, property: StripProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Strip\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus.\r\n\t * @param  {number} index Bus number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setBusParameter = (index: number, property: BusProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Bus\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * @param  {()=>any} fn Function which should be called if something changes\r\n\t */\r\n\tpublic attachChangeEvent = (fn: () => any) => {\r\n\t\tthis.eventPool.push(fn);\r\n\t};\r\n\r\n\t/**\r\n\t * Checks whether properties has been changed and calls all event listeners\r\n\t */\r\n\tprivate checkPropertyChange = () => {\r\n\t\tif (this.isParametersDirty() === 1) {\r\n\t\t\tthis.eventPool.forEach((eventListener) => {\r\n\t\t\t\teventListener();\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets installed voicemeeter type.\r\n\t * Means Voicemeeter(normal,banana,potato)\r\n\t */\r\n\tprivate getVoicemeeterType = (): VoiceMeeterTypes => {\r\n\t\tconst typePtr = new LongArray(1);\r\n\t\tif (libVM.VBVMR_GetVoicemeeterType(typePtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\tswitch (typePtr[0]) {\r\n\t\t\tcase 1: // Voicemeeter\r\n\t\t\t\treturn \"voicemeeter\";\r\n\t\t\tcase 2: // Voicemeeter Banana\r\n\t\t\t\treturn \"voicemeeterBanana\";\r\n\t\t\tcase 3: // Voicemeeter Potato\r\n\t\t\t\treturn \"voicemeeterPotato\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Voicemeeter seems not to be installed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the installed voicemeeter version\r\n\t */\r\n\tprivate getVoicemeeterVersion = () => {\r\n\t\tconst versionPtr = new LongArray(1) as any;\r\n\t\tif (libVM.VBVMR_GetVoicemeeterVersion(versionPtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\treturn versionPtr;\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a parameter of voicemeeter\r\n\t * @param  {'Strip'|'Bus'} selector Strip or Bus\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties} property Property which should be read\r\n\t */\r\n\tprivate getParameter = (selector: \"Strip\" | \"Bus\", index: number, property: StripProperties | BusProperties) => {\r\n\t\tconst parameterName = `${selector}[${index}].${property}`;\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not correct connected \");\r\n\t\t}\r\n\t\tconst hardwareIdPtr = Buffer.alloc(parameterName.length + 1);\r\n\t\thardwareIdPtr.write(parameterName);\r\n\t\tlet namePtr = null;\r\n\t\tif ([\"Label\", \"FadeTo\", \"FadeBy\", \"AppGain\", \"AppMute\", \"device.name\"].indexOf(property) > -1) {\r\n\t\t\tnamePtr = new CharArray(512);\r\n\t\t\tlibVM.VBVMR_GetParameterStringA(hardwareIdPtr, namePtr);\r\n\t\t\treturn String.fromCharCode\r\n\t\t\t\t.apply(null, namePtr)\r\n\t\t\t\t.split(\"\")\r\n\t\t\t\t.filter((e: string) => {\r\n\t\t\t\t\treturn e !== \"\\0\";\r\n\t\t\t\t})\r\n\t\t\t\t.join(\"\");\r\n\t\t}\r\n\t\tnamePtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetParameterFloat(hardwareIdPtr, namePtr);\r\n\t\treturn namePtr[0];\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus or Strip\r\n\t * @param  {'Strip'|'Bus'} selector\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tprivate setParameter = (\r\n\t\tselector: \"Strip\" | \"Bus\",\r\n\t\tindex: number,\r\n\t\tproperty: StripProperties | BusProperties,\r\n\t\tvalue: any\r\n\t): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tconst scriptString = `${selector}[${index}].${property}=${value};`;\r\n\t\tconst script = Buffer.alloc(scriptString.length + 1);\r\n\t\tscript.fill(0);\r\n\t\tscript.write(scriptString);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n\r\n\t/**\r\n\t * Sends a command\r\n\t * @param {CommandProperties} property Propertyname which should be executed\r\n\t * @param value Property value\r\n\t */\r\n\tpublic sendCommand = (property: CommandProperties, value: any): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tconst scriptString = `Command.${property}=${value};`;\r\n\t\tconst script = Buffer.alloc(scriptString.length + 1);\r\n\t\tscript.fill(0);\r\n\t\tscript.write(scriptString);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n}\r\n","export const InterfaceTypes = {\r\n\tstrip: 0,\r\n\tbus: 1,\r\n};\r\n\r\n/* @todo - probably through a different method\r\n\tStrip[i].GainLayer[j]\r\n*/\r\nexport enum StripProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tSolo = \"Solo\",\r\n\tMC = \"MC\",\r\n\tGain = \"Gain\",\r\n\tPan_x = \"Pan_x\",\r\n\tPan_y = \"Pan_y\",\r\n\tColor_x = \"Color_x\",\r\n\tColor_y = \"Color_y\",\r\n\tfx_x = \"fx_x\",\r\n\tfx_y = \"fx_y\",\r\n\tAudibility = \"Audibility\",\r\n\tComp = \"Comp\",\r\n\tGate = \"Gate\",\r\n\tKaraoke = \"Karaoke\",\r\n\tLimit = \"Limit\",\r\n\tEQGain1 = \"EQGain1\",\r\n\tEQGain2 = \"EQGain2\",\r\n\tEQGain3 = \"EQGain3\",\r\n\tLabel = \"Label\",\r\n\tA1 = \"A1\",\r\n\tA2 = \"A2\",\r\n\tA3 = \"A3\",\r\n\tA4 = \"A4\",\r\n\tA5 = \"A5\",\r\n\tB1 = \"B1\",\r\n\tB2 = \"B2\",\r\n\tB3 = \"B3\",\r\n\tFadeTo = \"FadeTo\",\r\n\tFadeBy = \"FadeBy\",\r\n\tReverb = \"Reverb\",\r\n\tDelay = \"Delay\",\r\n\tFx1 = \"Fx1\",\r\n\tFx2 = \"Fx2\",\r\n\tPostReverb = \"PostReverb\",\r\n\tPostDelay = \"PostDelay\",\r\n\tPostFx1 = \"PostFx1\",\r\n\tPostFx2 = \"PostFx2\",\r\n\tDeviceName = \"device.name\",\r\n\tDeviceSR = \"device.sr\",\r\n\tDeviceWDM = \"device.wdm\",\r\n\tDeviceKS = \"device.ks\",\r\n\tDeviceMME = \"device.mme\",\r\n\tDeviceASIO = \"device.asio\",\r\n}\r\n\r\n/* @todo - probably through a different method\r\n\tBus[i].EQ.channel[j].cell[k].on\r\n\tBus[i].EQ.channel[j].cell[k].type\r\n\tBus[i].EQ.channel[j].cell[k].f\r\n\tBus[i].EQ.channel[j].cell[k].gain\r\n\tBus[i].EQ.channel[j].cell[k].q\r\n*/\r\nexport enum BusProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tEQ = \"EQ.on\",\r\n\tEQAB = \"EQ.AB\",\r\n\tGain = \"Gain\",\r\n\tLabel = \"Label\", // not listed in api doc, but exists\r\n\tModeNormal = \"mode.normal\",\r\n\tModeAmix = \"mode.Amix\",\r\n\tModeBmix = \"mode.Bmix\",\r\n\tModeRepeat = \"mode.Repeat\",\r\n\tModeComposite = \"mode.Composite\",\r\n\tModeTVMix = \"mode.TVMix\",\r\n\tModeUpMix21 = \"mode.UpMix21\",\r\n\tModeUpMix41 = \"mode.UpMix41\",\r\n\tModeUpMix61 = \"mode.UpMix61\",\r\n\tModeCenterOnly = \"mode.CenterOnly\",\r\n\tModeLFEOnly = \"mode.LFEOnly\",\r\n\tFadeTo = \"FadeTo\",\r\n\tFadeBy = \"FadeBy\",\r\n\tSel = \"Sel\",\r\n\tReturnReverb = \"ReturnReverb\",\r\n\tReturnDelay = \"ReturnDelay\",\r\n\tReturnFx1 = \"ReturnFx1\",\r\n\tReturnFx2 = \"ReturnFx2\",\r\n\tMonitor = \"Monitor\",\r\n\tDeviceName = \"device.name\",\r\n\tDeviceSR = \"device.sr\",\r\n\tDeviceWDM = \"device.wdm\",\r\n\tDeviceKS = \"device.ks\",\r\n\tDeviceMME = \"device.mme\",\r\n\tDeviceASIO = \"device.asio\",\r\n}\r\n\r\nexport enum CommandProperties {\r\n\tShutdown = \"Shutdown\",\r\n\tShow = \"Show\",\r\n\tRestart = \"Restart\",\r\n\tEject = \"Eject\",\r\n\tReset = \"Reset\",\r\n\tSave = \"Save\",\r\n\tLoad = \"Load\",\r\n}\r\n","import Registry from \"winreg\";\r\n\r\nconst DLLHandler = {\r\n\tgetDLLPath: async (): Promise<any> => {\r\n\t\tconst regKey = new Registry({\r\n\t\t\thive: Registry.HKLM,\r\n\t\t\tkey: \"\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\VB:Voicemeeter {17359A74-1236-5467}\",\r\n\t\t});\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tregKey.values((err: any, items: any) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tthrow new Error(err);\r\n\t\t\t\t}\r\n\t\t\t\tconst unistallerPath = items.find((i: any) => i.name === \"UninstallString\").value;\r\n\t\t\t\tconst fileNameIndex = unistallerPath.lastIndexOf(\"\\\\\");\r\n\t\t\t\tresolve(unistallerPath.slice(0, fileNameIndex));\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n};\r\n\r\nexport default DLLHandler;\r\n","/* eslint-disable import/prefer-default-export */\r\nimport Voicemeeter from \"./lib/VoicemeeterConnector\";\r\nimport * as constants from \"./lib/VoicemeeterConsts\";\r\nimport * as types from \"./types/VoicemeeterTypes\";\r\n\r\nconst { BusProperties, InterfaceTypes, StripProperties } = constants;\r\n\r\nexport { Voicemeeter, BusProperties, InterfaceTypes, StripProperties, types };\r\n"],"names":["libVM","instance","StripProperties","BusProperties","CommandProperties","CharArray","refArray","LongArray","FloatArray","Voicemeeter","this","_this","isInitialised","Error","isConnected","VBVMR_Login","type","getVoicemeeterType","version","getVoicemeeterVersion","setInterval","checkPropertyChange","VBVMR_Logout","outputDevices","inputDevices","outputDeviceNumber","VBVMR_Output_GetDeviceNumber","i","hardwareIdPtr","namePtr","typePtr","VBVMR_Output_GetDeviceDescA","push","name","String","fromCharCode","toArray","replace","hardwareId","inputDeviceNumber","VBVMR_Input_GetDeviceNumber","VBVMR_Input_GetDeviceDescA","VBVMR_IsParametersDirty","index","property","getParameter","value","setParameter","fn","eventPool","isParametersDirty","forEach","eventListener","VBVMR_GetVoicemeeterType","versionPtr","VBVMR_GetVoicemeeterVersion","selector","parameterName","Buffer","alloc","length","write","indexOf","VBVMR_GetParameterStringA","apply","split","filter","e","join","VBVMR_GetParameterFloat","scriptString","script","fill","VBVMR_SetParameters","Promise","resolve","setTimeout","init","regKey","Registry","hive","HKLM","key","values","err","items","unistallerPath","find","fileNameIndex","lastIndexOf","slice","DLLHandler","dllPath","ffi","Library","VBVMR_RunVoicemeeter","constants","strip","bus"],"mappings":"sJAqBIA,EAIAC,ECjBQC,EAsDAC,EAkCAC,EAlCAD,uBDrDNE,EAAYC,UAAS,QAIrBC,EAAYD,UAAS,QAIrBE,EAAaF,UAAS,SAUPG,aAArB,wBAgCSC,oBAAgB,EAChBA,kBAAc,EACdA,mBAA0B,GAC1BA,kBAAyB,GACzBA,aAAU,GAEVA,eAAY,GAKbA,aAAU,WAChB,IAAKC,EAAKC,cACT,UAAUC,MAAM,2CAEjB,IAAIF,EAAKG,YAAT,CAGA,GAA4B,IAAxBd,EAAMe,cAKT,OAJAJ,EAAKG,aAAc,EACnBH,EAAKK,KAAOL,EAAKM,qBACjBN,EAAKO,QAAUP,EAAKQ,6BACpBC,YAAYT,EAAKU,oBAAqB,IAIvC,MADAV,EAAKG,aAAc,MACTD,MAAM,uBAsCVH,gBAAa,WACnB,IAAKC,EAAKG,YACT,UAAUD,MAAM,kBAEjB,IACC,GAA6B,IAAzBb,EAAMsB,eAET,YADAX,EAAKG,aAAc,GAGpB,UAAUD,MAAM,qBACf,SACD,UAAUA,MAAM,uBAOXH,sBAAmB,WACzB,IAAKC,EAAKG,YACT,UAAUD,MAAM,kBAEjBF,EAAKY,cAAgB,GACrBZ,EAAKa,aAAe,GAEpB,IADA,IAAMC,EAAqBzB,EAAM0B,+BACxBC,EAAI,EAAGA,EAAIF,EAAoBE,IAAK,CAC5C,IAAMC,EAAgB,IAAIvB,EAAU,KAC9BwB,EAAU,IAAIxB,EAAU,KACxByB,EAAU,IAAIvB,EAAU,GAE9BP,EAAM+B,4BAA4BJ,EAAGG,EAASD,EAASD,GACvDjB,EAAKY,cAAcS,KAAK,CACvBC,KAAMC,OAAOC,mBAAPD,OAAuBL,EAAQO,WAAWC,QAAQ,YAAa,IACrEC,WAAYJ,OAAOC,mBAAPD,OAAuBN,EAAcQ,WAAWC,QAAQ,YAAa,IACjFrB,KAAMc,EAAQ,KAKhB,IADA,IAAMS,EAAoBvC,EAAMwC,8BACvBb,EAAI,EAAGA,EAAIY,EAAmBZ,IAAK,CAC3C,IAAMC,EAAgB,IAAIvB,EAAU,KAC9BwB,EAAU,IAAIxB,EAAU,KACxByB,EAAU,IAAIvB,EAAU,GAE9BP,EAAMyC,2BAA2Bd,EAAGG,EAASD,EAASD,GACtDjB,EAAKa,aAAaQ,KAAK,CACtBC,KAAMC,OAAOC,mBAAPD,OAAuBL,EAAQO,WAAWC,QAAQ,YAAa,IACrEC,WAAYJ,OAAOC,mBAAPD,OAAuBN,EAAcQ,WAAWC,QAAQ,YAAa,IACjFrB,KAAMc,EAAQ,OAQVpB,uBAAoB,WAC1B,OAAOV,EAAM0C,2BASPhC,qBAAkB,SAACiC,EAAeC,GACxC,OAAOjC,EAAKkC,aAAa,MAAOF,EAAOC,IAQjClC,uBAAoB,SAACiC,EAAeC,GAC1C,OAAOjC,EAAKkC,aAAa,QAASF,EAAOC,IASnClC,uBAAoB,SAACiC,EAAeC,EAA2BE,GACrE,OAAOnC,EAAKoC,aAAa,QAASJ,EAAOC,EAAUE,IAS7CpC,qBAAkB,SAACiC,EAAeC,EAAyBE,GACjE,OAAOnC,EAAKoC,aAAa,MAAOJ,EAAOC,EAAUE,IAM3CpC,uBAAoB,SAACsC,GAC3BrC,EAAKsC,UAAUjB,KAAKgB,IAMbtC,yBAAsB,WACI,IAA7BC,EAAKuC,qBACRvC,EAAKsC,UAAUE,QAAQ,SAACC,GACvBA,OASK1C,wBAAqB,WAC5B,IAAMoB,EAAU,IAAIvB,EAAU,GAC9B,GAAgD,IAA5CP,EAAMqD,yBAAyBvB,GAClC,UAAUjB,MAAM,kBAEjB,OAAQiB,EAAQ,IACf,OACC,MAAO,cACR,OACC,MAAO,oBACR,OACC,MAAO,oBACR,QACC,UAAUjB,MAAM,2CAOXH,2BAAwB,WAC/B,IAAM4C,EAAa,IAAI/C,EAAU,GACjC,GAAsD,IAAlDP,EAAMuD,4BAA4BD,GACrC,UAAUzC,MAAM,kBAEjB,OAAOyC,GASA5C,kBAAe,SAAC8C,EAA2Bb,EAAeC,GACjE,IAAMa,EAAmBD,MAAYb,OAAUC,EAC/C,IAAKjC,EAAKG,YACT,UAAUD,MAAM,0BAEjB,IAAMe,EAAgB8B,OAAOC,MAAMF,EAAcG,OAAS,GAC1DhC,EAAciC,MAAMJ,GACpB,IAAI5B,EAAU,KACd,MAAI,CAAC,QAAS,SAAU,SAAU,UAAW,UAAW,eAAeiC,QAAQlB,IAAa,GAC3Ff,EAAU,IAAIxB,EAAU,KACxBL,EAAM+D,0BAA0BnC,EAAeC,GACxCK,OAAOC,aACZ6B,MAAM,KAAMnC,GACZoC,MAAM,IACNC,OAAO,SAACC,GACR,MAAa,OAANA,IAEPC,KAAK,MAERvC,EAAU,IAAIrB,EAAW,GACzBR,EAAMqE,wBAAwBzC,EAAeC,GACtCA,EAAQ,KAURnB,kBAAe,SACtB8C,EACAb,EACAC,EACAE,GAEA,IAAKnC,EAAKG,YACT,UAAUD,MAAM,kBAEjB,IAAMyD,EAAkBd,MAAYb,OAAUC,MAAYE,MACpDyB,EAASb,OAAOC,MAAMW,EAAaV,OAAS,GAIlD,OAHAW,EAAOC,KAAK,GACZD,EAAOV,MAAMS,GACbtE,EAAMyE,oBAAoBF,OACfG,QAAQ,SAACC,UAAYC,WAAWD,EAAS,QAQ9CjE,iBAAc,SAACkC,EAA6BE,GAClD,IAAKnC,EAAKG,YACT,UAAUD,MAAM,kBAEjB,IAAMyD,aAA0B1B,MAAYE,MACtCyB,EAASb,OAAOC,MAAMW,EAAaV,OAAS,GAIlD,OAHAW,EAAOC,KAAK,GACZD,EAAOV,MAAMS,GACbtE,EAAMyE,oBAAoBF,OACfG,QAAQ,SAACC,UAAYC,WAAWD,EAAS,uBApTjCE,0DE5BnB,IAAMC,EAAS,IAAIC,UAAS,CAC3BC,KAAMD,UAASE,KACfC,IAAK,gHAEN,uBAAO,IAAIR,QAAQ,SAACC,GACnBG,EAAOK,OAAO,SAACC,EAAUC,GACxB,GAAID,EACH,UAAUvE,MAAMuE,GAEjB,IAAME,EAAiBD,EAAME,KAAK,SAAC5D,SAAsB,oBAAXA,EAAEM,OAA4Ba,MACtE0C,EAAgBF,EAAeG,YAAY,MACjDd,EAAQW,EAAeI,MAAM,EAAGF,SAZzB,mCF8BaG,kBAAhBC,GAEN,WAAWlB,QAAQ,SAACC,GACd1E,IACJA,EAAW,IAAIQ,GAEhBT,EAAQ6F,UAAIC,QAAWF,6BAAmC,CACzD7E,YAAa,CAAC,OAAQ,IACtBO,aAAc,CAAC,OAAQ,IACvByE,qBAAsB,CAAC,OAAQ,CAAC,SAChCrD,wBAAyB,CAAC,OAAQ,IAClC2B,wBAAyB,CAAC,OAAQ,CAAChE,EAAWG,IAC9CuD,0BAA2B,CAAC,OAAQ,CAAC1D,EAAWA,IAChDoE,oBAAqB,CAAC,OAAQ,CAACpE,IAC/BqB,6BAA8B,CAAC,OAAQ,IACvCK,4BAA6B,CAAC,OAAQ,CAAC,OAAQxB,EAAWF,EAAWA,IACrEmC,4BAA6B,CAAC,OAAQ,IACtCC,2BAA4B,CAAC,OAAQ,CAAC,OAAQlC,EAAWF,EAAWA,IACpEgD,yBAA0B,CAAC,OAAQ,CAAC9C,IACpCgD,4BAA6B,CAAC,OAAQ,CAAChD,MAExCN,EAASW,eAAgB,EACzB+D,EAAQ1E,yEAqCV,WACC,YAAYsB,yCAOb,WACC,YAAYC,mCAOb,WACC,YAAYN,2BAOb,WACC,YAAYF,oMC7Gd,SAAYd,GACXA,cACAA,cACAA,cACAA,UACAA,cACAA,gBACAA,gBACAA,oBACAA,oBACAA,cACAA,cACAA,0BACAA,cACAA,cACAA,oBACAA,gBACAA,oBACAA,oBACAA,oBACAA,gBACAA,UACAA,UACAA,UACAA,UACAA,UACAA,UACAA,UACAA,UACAA,kBACAA,kBACAA,kBACAA,gBACAA,YACAA,YACAA,0BACAA,wBACAA,oBACAA,oBACAA,2BACAA,uBACAA,yBACAA,uBACAA,yBACAA,2BA5CD,CAAYA,IAAAA,QAsDAC,EAAAA,IAAAA,mBAEXA,cACAA,aACAA,eACAA,cACAA,gBACAA,2BACAA,uBACAA,uBACAA,2BACAA,iCACAA,yBACAA,6BACAA,6BACAA,6BACAA,mCACAA,6BACAA,kBACAA,kBACAA,YACAA,8BACAA,4BACAA,wBACAA,wBACAA,oBACAA,2BACAA,uBACAA,yBACAA,uBACAA,yBACAA,2BAGD,SAAYC,GACXA,sBACAA,cACAA,oBACAA,gBACAA,gBACAA,cACAA,cAPD,CAAYA,IAAAA,WE3F2BF,EAAoB8F,wBAAAA,yBFL7B,CAC7BC,MAAO,EACPC,IAAK"}